name: Franquette in a JAR
permissions:
  contents: write

on:
  push:
    tags:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Setup environment variables in .env
        run: |
          touch .env
          echo "BDD_USER=${{ secrets.BDD_USER }}" >> .env
          echo "BDD_PASS=${{ secrets.BDD_PASS }}" >> .env
          echo "SPRING_MAIL_ACCOUNT=${{ secrets.SPRING_MAIL_ACCOUNT }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml')}}
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests
        run: mvn test
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Copy jar into staging directory
        run: cp target/*.jar staging
      - name: Copy .env into staging directory
        run: cp .env staging
      - name: Copy Dockerfile into staging repertory
        run: cp Dockerfile staging
      - uses: actions/upload-artifact@v4
        with:
          name: La_bonne_Franquette
          path: staging

  upload-to-server:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      # 1. Récupérer l'artefact du job précédent
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: La_bonne_Franquette
          path: staging

      # 2. Création de la release et création du numéro de version
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: "Release auto-générée."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #3. Défini le numéro de version correspondant pour l'image Docker
      - name: Set image tag
        id: set_tag
        run: |
          echo "image_tag=v${{ github.run_number }}" >> $GITHUB_OUTPUT

      # 4. Se connecter au registry GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.PAT_TOKEN }}

      # 5. Build et push sur GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: staging         # dossier du Dockerfile
          push: true               # push après build
          tags: |
            ghcr.io/${{ secrets.REGISTRY_USER }}/api:latest
            ghcr.io/${{ secrets.REGISTRY_USER }}/api:${{ steps.set_tag.outputs.image_tag }}