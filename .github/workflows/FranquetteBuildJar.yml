name: Franquette in a JAR
on:
  push:
    tags:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: default
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: franquette-bdd-test
        ports:
          - 3306:3306
        options: >-
          --name mysql
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Setup environment variables in .env
        run: |
          touch .env
          echo "SPRING_MAIL_ACCOUNT=${{ secrets.SPRING_MAIL_ACCOUNT }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
      - name: Check .env file
        run: cat .env
      - name: List running containers
        run: docker ps
      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
          if docker exec mysql mysql -uroot -ptest -e "SELECT 1" &> /dev/null; then
           break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
          done
          if [ "$i" = 0 ]; then
          echo 'MySQL did not become available in time' >&2
          docker logs mysql
          exit 1
          fi
      - name: Force la création des bases de données
        run: docker exec -i mysql mysql -uroot -ptest < src/main/resources/mySql/franquette_db_init.sql
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml')}}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Create staging repertory
        run: mkdir staging staging/target
      - name: Copy jar into staging repertory
        run: cp target/*.jar staging/target
      - name: Copy Docker-compose into staging repertory
        run: cp docker-compose.yml staging
      - name: Copy Dockerfile into stating repertory
        run: cp Dockerfile staging
      - name: Copy shell script into staging repertory
        run: cp runner_la_Franquette.sh staging
      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging